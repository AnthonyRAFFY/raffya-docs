{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my doc Here you will find all the documentation regarding my work, my personal projects. It includes commands, scripts, ideas, observations and comments about parts of my code. Enjoy ! GitHub : https://github.com/AnthonyRAFFY","title":"Home"},{"location":"#welcome-to-my-doc","text":"Here you will find all the documentation regarding my work, my personal projects. It includes commands, scripts, ideas, observations and comments about parts of my code. Enjoy ! GitHub : https://github.com/AnthonyRAFFY","title":"Welcome to my doc"},{"location":"pyrolab-apps/","text":"Environment variables export LB_IP=\"your_ip\" # Example : \"192.168.1.27\" export NFS_IP=\"x.x.x.x\" # Example: \"192.168.1.21\" export CONFIG_PATH=\"your_config_nfs_path\" # Example : \"/nfs-data\" export DATA_PATH=\"your_data_nfs_path\" # Example : \"/nfs-data\" export CONFIG_SC=\"nfs-ssd\" export DATA_SC=\"nfs-hdd\" NFS Install both config and data nfs provisioner: helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner helm install nfs-hdd nfs-subdir-external-provisioner/nfs-subdir-external-provisioner \\ --set nfs.server=\"${NFS_IP}\" \\ --set nfs.path=\"${DATA_PATH}\" \\ --set storageClass.name=\"${DATA_SC}\" helm install nfs-ssd nfs-subdir-external-provisioner/nfs-subdir-external-provisioner \\ --set nfs.server=\"${NFS_IP}\" \\ --set nfs.path=\"${CONFIG_PATH}\" \\ --set storageClass.name=\"${CONFIG_SC}\" ACME Install the ArgoCD application: argocd app create acme --repo git@github.com:AnthonyRAFFY/homelab2.git --path acme --dest-namespace cert-manager --dest-server https://kubernetes.default.svc --directory-recurse Storage Install the ArgoCD application: argocd app create pvc --repo git@github.com:AnthonyRAFFY/homelab2.git --path pvc --dest-namespace media --dest-server https://kubernetes.default.svc Jellyseerr Install the ArgoCD application: argocd app create jellyseerr --repo git@github.com:AnthonyRAFFY/homelab2.git --path jellyseerr --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set lb_ip=\"${LB_IP}\" --helm-set storageClass=\"${CONFIG_SC}\" QBittorrent Install the ArgoCD application: argocd app create qbittorrent --repo git@github.com:AnthonyRAFFY/homelab2.git --path qbittorrent --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set lb_ip=\"${LB_IP}\" --helm-set storageClass=\"${CONFIG_SC}\" --helm-set wg_private_key=\"private_key_from_conf\" --helm-set wg_addresses=\"adresses_from_conf\" --helm-set wg_server_name=\"se-mma-wg-004\" --helm-set wg_port=\"51815\" Radarr Install the ArgoCD application: argocd app create radarr --repo git@github.com:AnthonyRAFFY/homelab2.git --path radarr --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set lb_ip=\"${LB_IP}\" --helm-set storageClass=\"${CONFIG_SC}\" Sonarr Install the ArgoCD application: argocd app create sonarr --repo git@github.com:AnthonyRAFFY/homelab2.git --path sonarr --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set lb_ip=\"${LB_IP}\" --helm-set storageClass=\"${CONFIG_SC}\" Prowlarr Install the ArgoCD application: argocd app create prowlarr --repo git@github.com:AnthonyRAFFY/homelab2.git --path prowlarr --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set lb_ip=\"${LB_IP}\" --helm-set storageClass=\"${CONFIG_SC}\" Jellyfin Install the ArgoCD application: argocd app create jellyfin --repo git@github.com:AnthonyRAFFY/homelab2.git --path jellyfin --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set lb_ip=\"${LB_IP}\" --helm-set storageClass=\"${CONFIG_SC}\" Flaresolverr Install the ArgoCD application: argocd app create flaresolverr --repo git@github.com:AnthonyRAFFY/homelab2.git --path flaresolverr --dest-namespace media --dest-server https://kubernetes.default.svc Dashboard Install the ArgoCD application: argocd app create dashboard --repo git@github.com:AnthonyRAFFY/homelab2.git --path dashboard --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set lb_ip=\"${LB_IP}\" --helm-set storageClass=\"${CONFIG_SC}\" Joal Install the ArgoCD application: argocd app create joal --repo git@github.com:AnthonyRAFFY/homelab2.git --path joal --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set lb_ip=\"${LB_IP}\" --helm-set storageClass=\"${CONFIG_SC}\" --helm-set wg_private_key=\"private_key_from_conf\" --helm-set wg_addresses=\"adresses_from_conf\" --helm-set wg_server_name=\"se-mma-wg-004\" --helm-set wg_port=\"51815\" --helm-set joal_prefix=\"your_joal_prefix\" --helm-set joal_secret_token=\"your_joal_secret_token\" Twitchminer Install the ArgoCD application: argocd app create twitchminer --repo git@github.com:AnthonyRAFFY/homelab2.git --path twitchminer --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set lb_ip=\"${LB_IP}\" --helm-set storageClass=\"${CONFIG_SC}\" Scrappey Proxy Install the ArgoCD application: argocd app create scrappey --repo git@github.com:AnthonyRAFFY/homelab2.git --path scrappey --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set proxy_username=\"username\" --helm-set proxy_password=\"password\" --helm-set scrappey_api_key=\"scrappey_api_key\" Do not forget to edit the htpasswd file included in the chart to match the username and password you provided","title":"Kube apps"},{"location":"pyrolab-apps/#environment-variables","text":"export LB_IP=\"your_ip\" # Example : \"192.168.1.27\" export NFS_IP=\"x.x.x.x\" # Example: \"192.168.1.21\" export CONFIG_PATH=\"your_config_nfs_path\" # Example : \"/nfs-data\" export DATA_PATH=\"your_data_nfs_path\" # Example : \"/nfs-data\" export CONFIG_SC=\"nfs-ssd\" export DATA_SC=\"nfs-hdd\"","title":"Environment variables"},{"location":"pyrolab-apps/#nfs","text":"Install both config and data nfs provisioner: helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner helm install nfs-hdd nfs-subdir-external-provisioner/nfs-subdir-external-provisioner \\ --set nfs.server=\"${NFS_IP}\" \\ --set nfs.path=\"${DATA_PATH}\" \\ --set storageClass.name=\"${DATA_SC}\" helm install nfs-ssd nfs-subdir-external-provisioner/nfs-subdir-external-provisioner \\ --set nfs.server=\"${NFS_IP}\" \\ --set nfs.path=\"${CONFIG_PATH}\" \\ --set storageClass.name=\"${CONFIG_SC}\"","title":"NFS"},{"location":"pyrolab-apps/#acme","text":"Install the ArgoCD application: argocd app create acme --repo git@github.com:AnthonyRAFFY/homelab2.git --path acme --dest-namespace cert-manager --dest-server https://kubernetes.default.svc --directory-recurse","title":"ACME"},{"location":"pyrolab-apps/#storage","text":"Install the ArgoCD application: argocd app create pvc --repo git@github.com:AnthonyRAFFY/homelab2.git --path pvc --dest-namespace media --dest-server https://kubernetes.default.svc","title":"Storage"},{"location":"pyrolab-apps/#jellyseerr","text":"Install the ArgoCD application: argocd app create jellyseerr --repo git@github.com:AnthonyRAFFY/homelab2.git --path jellyseerr --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set lb_ip=\"${LB_IP}\" --helm-set storageClass=\"${CONFIG_SC}\"","title":"Jellyseerr"},{"location":"pyrolab-apps/#qbittorrent","text":"Install the ArgoCD application: argocd app create qbittorrent --repo git@github.com:AnthonyRAFFY/homelab2.git --path qbittorrent --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set lb_ip=\"${LB_IP}\" --helm-set storageClass=\"${CONFIG_SC}\" --helm-set wg_private_key=\"private_key_from_conf\" --helm-set wg_addresses=\"adresses_from_conf\" --helm-set wg_server_name=\"se-mma-wg-004\" --helm-set wg_port=\"51815\"","title":"QBittorrent"},{"location":"pyrolab-apps/#radarr","text":"Install the ArgoCD application: argocd app create radarr --repo git@github.com:AnthonyRAFFY/homelab2.git --path radarr --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set lb_ip=\"${LB_IP}\" --helm-set storageClass=\"${CONFIG_SC}\"","title":"Radarr"},{"location":"pyrolab-apps/#sonarr","text":"Install the ArgoCD application: argocd app create sonarr --repo git@github.com:AnthonyRAFFY/homelab2.git --path sonarr --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set lb_ip=\"${LB_IP}\" --helm-set storageClass=\"${CONFIG_SC}\"","title":"Sonarr"},{"location":"pyrolab-apps/#prowlarr","text":"Install the ArgoCD application: argocd app create prowlarr --repo git@github.com:AnthonyRAFFY/homelab2.git --path prowlarr --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set lb_ip=\"${LB_IP}\" --helm-set storageClass=\"${CONFIG_SC}\"","title":"Prowlarr"},{"location":"pyrolab-apps/#jellyfin","text":"Install the ArgoCD application: argocd app create jellyfin --repo git@github.com:AnthonyRAFFY/homelab2.git --path jellyfin --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set lb_ip=\"${LB_IP}\" --helm-set storageClass=\"${CONFIG_SC}\"","title":"Jellyfin"},{"location":"pyrolab-apps/#flaresolverr","text":"Install the ArgoCD application: argocd app create flaresolverr --repo git@github.com:AnthonyRAFFY/homelab2.git --path flaresolverr --dest-namespace media --dest-server https://kubernetes.default.svc","title":"Flaresolverr"},{"location":"pyrolab-apps/#dashboard","text":"Install the ArgoCD application: argocd app create dashboard --repo git@github.com:AnthonyRAFFY/homelab2.git --path dashboard --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set lb_ip=\"${LB_IP}\" --helm-set storageClass=\"${CONFIG_SC}\"","title":"Dashboard"},{"location":"pyrolab-apps/#joal","text":"Install the ArgoCD application: argocd app create joal --repo git@github.com:AnthonyRAFFY/homelab2.git --path joal --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set lb_ip=\"${LB_IP}\" --helm-set storageClass=\"${CONFIG_SC}\" --helm-set wg_private_key=\"private_key_from_conf\" --helm-set wg_addresses=\"adresses_from_conf\" --helm-set wg_server_name=\"se-mma-wg-004\" --helm-set wg_port=\"51815\" --helm-set joal_prefix=\"your_joal_prefix\" --helm-set joal_secret_token=\"your_joal_secret_token\"","title":"Joal"},{"location":"pyrolab-apps/#twitchminer","text":"Install the ArgoCD application: argocd app create twitchminer --repo git@github.com:AnthonyRAFFY/homelab2.git --path twitchminer --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set lb_ip=\"${LB_IP}\" --helm-set storageClass=\"${CONFIG_SC}\"","title":"Twitchminer"},{"location":"pyrolab-apps/#scrappey-proxy","text":"Install the ArgoCD application: argocd app create scrappey --repo git@github.com:AnthonyRAFFY/homelab2.git --path scrappey --dest-namespace media --dest-server https://kubernetes.default.svc --helm-set proxy_username=\"username\" --helm-set proxy_password=\"password\" --helm-set scrappey_api_key=\"scrappey_api_key\" Do not forget to edit the htpasswd file included in the chart to match the username and password you provided","title":"Scrappey Proxy"},{"location":"pyrolab/","text":"Helm installation curl -sSL -O https://get.helm.sh/helm-v3.14.4-linux-amd64.tar.gz tar -zxvf helm-v3.14.4-linux-amd64.tar.gz sudo install -m 555 linux-amd64/helm /usr/local/bin/helm rm -r linux-amd64 helm-v3.14.4-linux-amd64.tar.gz Traefik Traefik is already installed by default with K3S Cert-manager installation Helm repository helm repo add jetstack https://charts.jetstack.io --force-update helm repo update Install CRDs without helm (recommanded in the official documentation) kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.crds.yaml Helm chart helm install \\ cert-manager jetstack/cert-manager \\ --namespace cert-manager \\ --create-namespace \\ --version v1.14.4 \\ --set prometheus.enabled=false Self-signed certificate authority apiVersion: cert-manager.io/v1 kind: ClusterIssuer metadata: name: pyrolab-selfsigned-issuer spec: selfSigned: {} --- apiVersion: cert-manager.io/v1 kind: Certificate metadata: name: pyrolab-selfsigned-cert namespace: cert-manager spec: isCA: true commonName: pyrolab-selfsigned-cert secretName: pyrolab-selfsigned-tls privateKey: algorithm: ECDSA size: 256 issuerRef: name: pyrolab-selfsigned-issuer kind: ClusterIssuer group: cert-manager.io subject: organizations: - Pyrolab inc. organizationalUnits: - Pyrolab --- apiVersion: cert-manager.io/v1 kind: ClusterIssuer metadata: name: pyrolab-issuer spec: ca: secretName: pyrolab-selfsigned-tls Export the base64 encoded ca.crt from \"pyrolab-selfsigned-cert\", decode it and import it in your OS. ArgoCD Installation kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd rm argocd-linux-amd64 # Get the initial password argocd admin initial-password -n argocd # Once you have the password, delete the argocd-initial-admin-secret secret Certificate apiVersion: cert-manager.io/v1 kind: Certificate metadata: name: argocd-cert namespace: argocd spec: dnsNames: - argocd.192.168.1.27.nip.io secretName: argocd-tls issuerRef: name: pyrolab-issuer kind: ClusterIssuer Disable TLS termination By default Argo-CD handles TLS termination itself and always redirects HTTP requests to HTTPS. Combine that with an ingress controller that also handles TLS termination and always communicates with the backend service with HTTP and you get Argo-CD's server always responding with a redirects to HTTPS. kubectl edit configmaps -n argocd argocd-cmd-params-cm # Add data: server.insecure: \"true\" then run the command kubectl edit configmaps -n argocd argocd-cmd-params-cm Ingress route creation apiVersion: traefik.containo.us/v1alpha1 kind: IngressRoute metadata: name: argocd-server namespace: argocd spec: entryPoints: - websecure routes: - kind: Rule match: Host(`argocd.192.168.1.27.nip.io`) priority: 10 services: - name: argocd-server port: 80 - kind: Rule match: Host(`argocd.192.168.1.27.nip.io`) && Headers(`Content-Type`, `application/grpc`) priority: 11 services: - name: argocd-server port: 80 scheme: h2c tls: secretName: argocd-tls Login Connect to the UI dashboard and change the default admin password, then connect the argocd CLI argocd login argocd.192.168.1.27.nip.io","title":"Kube setup"},{"location":"pyrolab/#helm-installation","text":"curl -sSL -O https://get.helm.sh/helm-v3.14.4-linux-amd64.tar.gz tar -zxvf helm-v3.14.4-linux-amd64.tar.gz sudo install -m 555 linux-amd64/helm /usr/local/bin/helm rm -r linux-amd64 helm-v3.14.4-linux-amd64.tar.gz","title":"Helm installation"},{"location":"pyrolab/#traefik","text":"Traefik is already installed by default with K3S","title":"Traefik"},{"location":"pyrolab/#cert-manager-installation","text":"","title":"Cert-manager installation"},{"location":"pyrolab/#helm-repository","text":"helm repo add jetstack https://charts.jetstack.io --force-update helm repo update","title":"Helm repository"},{"location":"pyrolab/#install-crds-without-helm-recommanded-in-the-official-documentation","text":"kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.crds.yaml","title":"Install CRDs without helm (recommanded in the official documentation)"},{"location":"pyrolab/#helm-chart","text":"helm install \\ cert-manager jetstack/cert-manager \\ --namespace cert-manager \\ --create-namespace \\ --version v1.14.4 \\ --set prometheus.enabled=false","title":"Helm chart"},{"location":"pyrolab/#self-signed-certificate-authority","text":"apiVersion: cert-manager.io/v1 kind: ClusterIssuer metadata: name: pyrolab-selfsigned-issuer spec: selfSigned: {} --- apiVersion: cert-manager.io/v1 kind: Certificate metadata: name: pyrolab-selfsigned-cert namespace: cert-manager spec: isCA: true commonName: pyrolab-selfsigned-cert secretName: pyrolab-selfsigned-tls privateKey: algorithm: ECDSA size: 256 issuerRef: name: pyrolab-selfsigned-issuer kind: ClusterIssuer group: cert-manager.io subject: organizations: - Pyrolab inc. organizationalUnits: - Pyrolab --- apiVersion: cert-manager.io/v1 kind: ClusterIssuer metadata: name: pyrolab-issuer spec: ca: secretName: pyrolab-selfsigned-tls Export the base64 encoded ca.crt from \"pyrolab-selfsigned-cert\", decode it and import it in your OS.","title":"Self-signed certificate authority"},{"location":"pyrolab/#argocd","text":"","title":"ArgoCD"},{"location":"pyrolab/#installation","text":"kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd rm argocd-linux-amd64 # Get the initial password argocd admin initial-password -n argocd # Once you have the password, delete the argocd-initial-admin-secret secret","title":"Installation"},{"location":"pyrolab/#certificate","text":"apiVersion: cert-manager.io/v1 kind: Certificate metadata: name: argocd-cert namespace: argocd spec: dnsNames: - argocd.192.168.1.27.nip.io secretName: argocd-tls issuerRef: name: pyrolab-issuer kind: ClusterIssuer","title":"Certificate"},{"location":"pyrolab/#disable-tls-termination","text":"By default Argo-CD handles TLS termination itself and always redirects HTTP requests to HTTPS. Combine that with an ingress controller that also handles TLS termination and always communicates with the backend service with HTTP and you get Argo-CD's server always responding with a redirects to HTTPS. kubectl edit configmaps -n argocd argocd-cmd-params-cm # Add data: server.insecure: \"true\" then run the command kubectl edit configmaps -n argocd argocd-cmd-params-cm","title":"Disable TLS termination"},{"location":"pyrolab/#ingress-route-creation","text":"apiVersion: traefik.containo.us/v1alpha1 kind: IngressRoute metadata: name: argocd-server namespace: argocd spec: entryPoints: - websecure routes: - kind: Rule match: Host(`argocd.192.168.1.27.nip.io`) priority: 10 services: - name: argocd-server port: 80 - kind: Rule match: Host(`argocd.192.168.1.27.nip.io`) && Headers(`Content-Type`, `application/grpc`) priority: 11 services: - name: argocd-server port: 80 scheme: h2c tls: secretName: argocd-tls","title":"Ingress route creation"},{"location":"pyrolab/#login","text":"Connect to the UI dashboard and change the default admin password, then connect the argocd CLI argocd login argocd.192.168.1.27.nip.io","title":"Login"},{"location":"setup/","text":"This documentation contains every steps necessary to setup the basics for my own Ubuntu-server 22.04 Up-to-date installation First, make sure the installation is fully up-to-date : sudo apt-get update sudo apt-get upgrade Zsh Install Zsh as it will provide better customizations later sudo apt-get install zsh chsh -s /bin/zsh Color support for MobaXTerm (Optional) Color support for MobaXTerm echo 'export TERM=xterm-256color' >>~/.zshrc Powerlevel10k Powerlevel10k provides great customizations options for Zsh git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k echo 'source ~/powerlevel10k/powerlevel10k.zsh-theme' >>~/.zshrc A powerlevel10k setup wizard should pop up after these commands. K3S as a service Install K3S without Traefik using the official K3S installation script. curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"--disable=traefik\" sh - # Import the configuration file needed for kubectl to communicate with the cluster mkdir ~/.kube 2> /dev/null sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config sudo chown \"$USER:$USER\" ~/.kube/config chmod 600 ~/.kube/config echo 'export KUBECONFIG=~/.kube/config' >>~/.zshrc Make sure this is working by running any kubectl command. Example : kubectl get pods --all-namespaces Autocompletion for zsh Add autocompletion based on your command history git clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions echo 'source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh' >>~/.zshrc Better grep and ls, aliases Title says it all. cat >>~/.zshrc <<EOL # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"\\$(dircolors -b ~/.dircolors)\" || eval \"\\$(dircolors -b)\" alias ls='ls --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi EOL Kubecolor Add colors for the kubectl command. wget https://github.com/hidetatz/kubecolor/releases/download/v0.0.25/kubecolor_0.0.25_Linux_x86_64.tar.gz sudo tar -xzf kubecolor_0.0.25_Linux_x86_64.tar.gz -C /usr/local/bin kubecolor sudo chown root:root /usr/local/bin/kubecolor sudo chmod 755 /usr/local/bin/kubecolor Kubectl zsh completion If you installed K3S, this add command completion for kubectl (pods names, namespaces, etc.) Remove alias kubectl=kubecolor compdef kubecolor=kubectl from the below code if you decided not to install kubecolor. cat >>~/.zshrc <<EOL # Zsh K8S completion source <(kubectl completion zsh) alias kubectl=kubecolor compdef kubecolor=kubectl alias k=kubectl alias ksvc=\"kubectl get svc\" alias kpods=\"kubectl get pod\" alias kpv=\"kubectl get pv\" alias kpvc=\"kubectl get pvc\" EOL DNS On Ubuntu server 22.04, DNS requests are sent to 127.0.0.1:53 and handled by systemd-resolved To specify your DNS servers, modify /etc/systemd/resolved.conf and restart the service systemctl restart systemd-resolved.service If you need to free up the port 53 (Custom DNS server for example), you need to disable the stub DNSStubListener=no Create a file /etc/systemd/resolved.conf.d/no-stub.conf with the following contents: [Resolve] DNSStubListener=no On older version of linux, you need to manually update the symlink /etc/resolv.conf to /run/systemd/resolve/resolv.conf as it keeps the symlink to /run/systemd/resolve/stub-resolv.conf Miniconda For python users, install miniconda and its Zsh integration mkdir -p ~/miniconda3 wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3 rm -rf ~/miniconda3/miniconda.sh ~/miniconda3/bin/conda init zsh","title":"Setup"},{"location":"setup/#up-to-date-installation","text":"First, make sure the installation is fully up-to-date : sudo apt-get update sudo apt-get upgrade","title":"Up-to-date installation"},{"location":"setup/#zsh","text":"Install Zsh as it will provide better customizations later sudo apt-get install zsh chsh -s /bin/zsh","title":"Zsh"},{"location":"setup/#color-support-for-mobaxterm","text":"(Optional) Color support for MobaXTerm echo 'export TERM=xterm-256color' >>~/.zshrc","title":"Color support for MobaXTerm"},{"location":"setup/#powerlevel10k","text":"Powerlevel10k provides great customizations options for Zsh git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k echo 'source ~/powerlevel10k/powerlevel10k.zsh-theme' >>~/.zshrc A powerlevel10k setup wizard should pop up after these commands.","title":"Powerlevel10k"},{"location":"setup/#k3s-as-a-service","text":"Install K3S without Traefik using the official K3S installation script. curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"--disable=traefik\" sh - # Import the configuration file needed for kubectl to communicate with the cluster mkdir ~/.kube 2> /dev/null sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config sudo chown \"$USER:$USER\" ~/.kube/config chmod 600 ~/.kube/config echo 'export KUBECONFIG=~/.kube/config' >>~/.zshrc Make sure this is working by running any kubectl command. Example : kubectl get pods --all-namespaces","title":"K3S as a service"},{"location":"setup/#autocompletion-for-zsh","text":"Add autocompletion based on your command history git clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions echo 'source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh' >>~/.zshrc","title":"Autocompletion for zsh"},{"location":"setup/#better-grep-and-ls-aliases","text":"Title says it all. cat >>~/.zshrc <<EOL # enable color support of ls and also add handy aliases if [ -x /usr/bin/dircolors ]; then test -r ~/.dircolors && eval \"\\$(dircolors -b ~/.dircolors)\" || eval \"\\$(dircolors -b)\" alias ls='ls --color=auto' alias grep='grep --color=auto' alias fgrep='fgrep --color=auto' alias egrep='egrep --color=auto' fi EOL","title":"Better grep and ls, aliases"},{"location":"setup/#kubecolor","text":"Add colors for the kubectl command. wget https://github.com/hidetatz/kubecolor/releases/download/v0.0.25/kubecolor_0.0.25_Linux_x86_64.tar.gz sudo tar -xzf kubecolor_0.0.25_Linux_x86_64.tar.gz -C /usr/local/bin kubecolor sudo chown root:root /usr/local/bin/kubecolor sudo chmod 755 /usr/local/bin/kubecolor","title":"Kubecolor"},{"location":"setup/#kubectl-zsh-completion","text":"If you installed K3S, this add command completion for kubectl (pods names, namespaces, etc.) Remove alias kubectl=kubecolor compdef kubecolor=kubectl from the below code if you decided not to install kubecolor. cat >>~/.zshrc <<EOL # Zsh K8S completion source <(kubectl completion zsh) alias kubectl=kubecolor compdef kubecolor=kubectl alias k=kubectl alias ksvc=\"kubectl get svc\" alias kpods=\"kubectl get pod\" alias kpv=\"kubectl get pv\" alias kpvc=\"kubectl get pvc\" EOL","title":"Kubectl zsh completion"},{"location":"setup/#dns","text":"On Ubuntu server 22.04, DNS requests are sent to 127.0.0.1:53 and handled by systemd-resolved To specify your DNS servers, modify /etc/systemd/resolved.conf and restart the service systemctl restart systemd-resolved.service If you need to free up the port 53 (Custom DNS server for example), you need to disable the stub DNSStubListener=no Create a file /etc/systemd/resolved.conf.d/no-stub.conf with the following contents: [Resolve] DNSStubListener=no On older version of linux, you need to manually update the symlink /etc/resolv.conf to /run/systemd/resolve/resolv.conf as it keeps the symlink to /run/systemd/resolve/stub-resolv.conf","title":"DNS"},{"location":"setup/#miniconda","text":"For python users, install miniconda and its Zsh integration mkdir -p ~/miniconda3 wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3 rm -rf ~/miniconda3/miniconda.sh ~/miniconda3/bin/conda init zsh","title":"Miniconda"}]}